// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel SkinColor

Texture2D<float4> origAlbedo;
Texture2D<float4> areaMask;

RWTexture2D<float4> Result;
float4 areaR;float4 areaG;float4 areaB;float4 areaA;

float3 RGB2HSV(float3 c)
{
    float4 K = float4(0.0, -0.3333333333333333, 0.6666666666666667, -1.0);
    float4 p = lerp(float4(c.bg, K.wz), float4(c.gb, K.xy), step(c.b, c.g));
    float4 q = lerp(float4(p.xyw, c.r), float4(c.r, p.yzx), step(p.x, c.r));
    
    float d = q.x - min(q.w, q.y);
    float e = 1.0e-4;
    return float3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

float3 HSV2RGB(float3 c)
{
    float4 K = float4(1.0, 0.6666666666666667, 0.3333333333333333, 3.0);
    float3 p = abs(frac(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * lerp(K.xxx, saturate(p - K.xxx), c.y);
}

[numthreads(8, 8, 1)]
void SkinColor(uint3 id: SV_DispatchThreadID)
{
    float4 maskArea = areaMask[id.xy];
    
    float4 origColor = origAlbedo[id.xy];
    
    float hdrR = max(max(max(areaR.r, areaR.g), areaR.b), 0.001);
    float hdrG = max(max(max(areaG.r, areaG.g), areaG.b), 0.001);
    float hdrB = max(max(max(areaB.r, areaB.g), areaB.b), 0.001);
    float hdrA = max(max(max(areaA.r, areaA.g), areaA.b), 0.001);
    
    float4 replaceColor = (maskArea.r * (areaR) + maskArea.g * (areaG) + maskArea.b * (areaB) + maskArea.a * (areaA)) / max(maskArea.r + maskArea.g + maskArea.b + maskArea.a, 1e-4);
    float replaceHDR = max((maskArea.r * hdrR + maskArea.g * hdrG + maskArea.b * hdrB + maskArea.a * hdrA) / (maskArea.r + maskArea.g + maskArea.b + maskArea.a), 1.0);
    
    float3 origColorHSV = RGB2HSV(origColor.rgb);
    float3 replaceHSV = RGB2HSV(replaceColor.rgb);
    origColor.rgb = HSV2RGB(half3(replaceHSV.rg, origColorHSV.b + (replaceHDR - 1.0)));
    
    
    origColor.rgb = lerp(origColor.rgb, (areaR.rgb * maskArea.r + areaG.rgb * maskArea.g), (maskArea.r+ maskArea.g));
    origColor.rgb = lerp(origColor.rgb, (areaR.rgb * maskArea.r + areaB.rgb * maskArea.b), (maskArea.r, maskArea.b));
    origColor.rgb = lerp(origColor.rgb, (areaR.rgb * maskArea.r + areaA.rgb * maskArea.a), (maskArea.r, maskArea.a));
    origColor.rgb = lerp(origColor.rgb, (areaG.rgb * maskArea.g + areaB.rgb * maskArea.b), (maskArea.g, maskArea.b));
    origColor.rgb = lerp(origColor.rgb, (areaG.rgb * maskArea.g + areaA.rgb * maskArea.a), (maskArea.g, maskArea.a));
    origColor.rgb = lerp(origColor.rgb, (areaB.rgb * maskArea.b + areaA.rgb * maskArea.a), (maskArea.b, maskArea.a));
    
    float noneArea = 1.0 - max(max(maskArea.r, maskArea.g), max(maskArea.b, maskArea.a));
    origColor = lerp(origColor, origAlbedo[id.xy], noneArea);
    //origColor.rgb = min(maskArea.r, maskArea.g);
    Result[id.xy] = origColor;
}
